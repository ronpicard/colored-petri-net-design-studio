/*globals define, WebGMEGlobal*/
/*jshint browser: true*/
/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Sun Dec 02 2018 07:53:57 GMT-0600 (Central Standard Time).
 */

define(['js/Constants'
], function (CONSTANTS) {

    'use strict';

    var JointJsControl;

    JointJsControl = function (options) {

        this._logger = options.logger.fork('Control');

        this._client = options.client;

        // Initialize core collections and variables
        this._widget = options.widget;

        this._currentNodeId = null;
        this._currentNodeParentId = undefined;

        this._initWidgetEventHandlers();

        this._logger.debug('ctor finished');
    };

    JointJsControl.prototype._initWidgetEventHandlers = function () {
    };

    /* * * * * * * * Visualizer content update callbacks * * * * * * * */
    // One major concept here is with managing the territory. The territory
    // defines the parts of the project that the visualizer is interested in
    // (this allows the browser to then only load those relevant parts).
    JointJsControl.prototype.selectedObjectChanged = function (nodeId) {
        var self = this,
            staticNetwork = {
                places: {
                    'start': {position: {x: 100, y: 100}, tokens: {red: 1, blue: 3, yellow: 6}},
                    'stop': {position: {x: 300, y: 100}, tokens: {red: 1, blue: 3, yellow: 6}}
                },
                transitions: {'go': {position: {x: 200, y: 50}, input: {red: 1, blue: 1, yellow: 0}, output: {red: 2}}},
                connections: [{from: 'start', to: 'go'}, {from: 'go', to: 'stop'}]
            };

        //TODO - here should lie a function that creates the network object
        this._widget.initNetwork(staticNetwork);
    };

    /* * * * * * * * Node Event Handling * * * * * * * */
    JointJsControl.prototype._eventCallback = function (events) {
    };

    JointJsControl.prototype._stateActiveObjectChanged = function (model, activeObjectId) {
        if (this._currentNodeId === activeObjectId) {
            // The same node selected as before - do not trigger
        } else {
            this.selectedObjectChanged(activeObjectId);
        }
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    JointJsControl.prototype.destroy = function () {
        this._detachClientEventListeners();
        this._removeToolbarItems();
    };

    JointJsControl.prototype._attachClientEventListeners = function () {
        this._detachClientEventListeners();
        WebGMEGlobal.State.on('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged, this);
    };

    JointJsControl.prototype._detachClientEventListeners = function () {
        WebGMEGlobal.State.off('change:' + CONSTANTS.STATE_ACTIVE_OBJECT, this._stateActiveObjectChanged);
    };

    JointJsControl.prototype.onActivate = function () {
        this._attachClientEventListeners();
        this._displayToolbarItems();

        if (typeof this._currentNodeId === 'string') {
            WebGMEGlobal.State.registerSuppressVisualizerFromNode(true);
            WebGMEGlobal.State.registerActiveObject(this._currentNodeId);
            WebGMEGlobal.State.registerSuppressVisualizerFromNode(false);
        }
    };

    JointJsControl.prototype.onDeactivate = function () {
        this._detachClientEventListeners();
        this._hideToolbarItems();
    };

    /* * * * * * * * * * Updating the toolbar * * * * * * * * * */
    JointJsControl.prototype._displayToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].show();
            }
        } else {
            this._initializeToolbar();
        }
    };

    JointJsControl.prototype._hideToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].hide();
            }
        }
    };

    JointJsControl.prototype._removeToolbarItems = function () {

        if (this._toolbarInitialized === true) {
            for (var i = this._toolbarItems.length; i--;) {
                this._toolbarItems[i].destroy();
            }
        }
    };

    JointJsControl.prototype._initializeToolbar = function () {
        var self = this,
            toolBar = WebGMEGlobal.Toolbar;

        this._toolbarItems = [];

        this._toolbarItems.push(toolBar.addSeparator());

        this.$btnStepBackward = toolBar.addButton({
            title: 'Step Backward',
            icon: 'gylphicon glyphicon-step-backward',
            clickFn: function (/*data*/) {
                self._widget.stepBackward();
            }
        });
        this._toolbarItems.push(this.$btnStepBackward);

        this.$btnResetSimulation = toolBar.addButton({
            title: 'Reset Simulation',
            icon: 'gylphicon glyphicon-step-backward',
            clickFn: function (/*data*/) {
                self._widget.resetTrace();
            }
        });
        this._toolbarItems.push(this.$btnResetSimulation);

        this.$btnStepForward = toolBar.addButton({
            title: 'Step Forward',
            icon: 'gylphicon glyphicon-step-forward',
            clickFn: function (/*data*/) {
                self._widget.stepForward();
            }
        });

        this._toolbarInitialized = true;
    };

    return JointJsControl;
});
