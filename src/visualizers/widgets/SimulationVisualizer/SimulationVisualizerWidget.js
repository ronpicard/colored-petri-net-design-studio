/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Mon Nov 26 2018 14:32:49 GMT-0600 (Central Standard Time).
 */

define(['css!./styles/SimulationVisualizerWidget.css'], function () {
    'use strict';

    var SimulationVisualizerWidget,
        WIDGET_CLASS = 'simulation-visualizer';

    SimulationVisualizerWidget = function (logger, container) {
        this._logger = logger.fork('Widget');

        this._el = container;
        
        this.nodes = {};
        this._initialize();

        this._logger.debug('ctor finished');
    };

    SimulationVisualizerWidget.prototype._initialize = function () {
        var width = this._el.width(),
            height = this._el.height(),
            self = this;

        // set widget class
        this._el.addClass(WIDGET_CLASS);

        // Create a dummy header 
        this._el.append('<h3>SimulationVisualizer Events:</h3>');

        // Registering to events can be done with jQuery (as normal)
        this._el.on('dblclick', function (event) {
            event.stopPropagation();
            event.preventDefault();
            self.onBackgroundDblClick();
        });
    };

    SimulationVisualizerWidget.prototype.onWidgetContainerResize = function (width, height) {
        this._logger.debug('Widget is resizing...');
    };

    // Adding/Removing/Updating items
    SimulationVisualizerWidget.prototype.addNode = function (desc) {
        if (desc) {
            // Add node to a table of nodes
            var node = document.createElement('div'),
                label = 'children';

            if (desc.childrenIds.length === 1) {
                label = 'child';
            }
            
            this.nodes[desc.id] = desc;
            node.innerHTML = 'Adding node "' + desc.name + '" (click to view). ' + 
                desc.childrenIds.length + ' ' + label + '.';
            
            this._el.append(node);
            this.addPlaceSVG();
            this.addTransitionSVG();
            node.onclick = this.onNodeClick.bind(this, desc.id);
        }
    };

    SimulationVisualizerWidget.prototype.addPlaceSVG = function () {
    var place = '\
        <svg xmlns="http://www.w3.org/2000/svg" width="120px" height="120px">\
            <circle cx="60" cy="60" r="60" stroke="black" stroke-width="2" fill="white" />\
            <%var s=getAttribute("Tokens"); var ar=s.split(";"); var text="test"; var x=60; var y=11; var col="black";%>\
            <% var i=0; for(i=0; i<ar.length; i++){ %>\
            <% col=ar[i].split(":")[0]; text=ar[i].split(":")[1];  %>\
            <text x="<%= x %>" y="<%= y %>" fill="<%= col%>" font-size="15" text-anchor="middle"  >\
            <%=text%>\
            </text>\
            <% y=y+15;}%>\
        </svg>\
    ';
    this._el.append(place);
    };

    SimulationVisualizerWidget.prototype.addTransitionSVG = function () {
        var place = '\
        <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="70px">\
            <rect width="20" height="70" style="fill:rgb(0,0,0);stroke-width:3;stroke:rgb(0,0,0)" />\
            <%var s=getAttribute("Tokens"); var ar=s.split(";"); var text=""; var x=10; var y=11; var col="black";%>\
            <% var i=0; for(i=0; i<ar.length; i++){ %>\
            <% col=ar[i].split(":")[0]; text=ar[i].split(":")[1];  %>\
            <text x="<%= x %>" y="<%= y %>" fill="<%= col%>" font-size="15"text-anchor="middle"  >\
            <%=text%>\
            </text>\
            <% y=y+15;}%>\
        </svg>\
        ';
        this._el.append(place);
        };

    SimulationVisualizerWidget.prototype.removeNode = function (gmeId) {
        var desc = this.nodes[gmeId];
        this._el.append('<div>Removing node "' + desc.name + '"</div>');
        delete this.nodes[gmeId];
    };

    SimulationVisualizerWidget.prototype.updateNode = function (desc) {
        if (desc) {
            this._logger.debug('Updating node:', desc);
            this._el.append('<div>Updating node "' + desc.name + '"</div>');
        }
    };

    /* * * * * * * * Visualizer event handlers * * * * * * * */

    SimulationVisualizerWidget.prototype.onNodeClick = function (/*id*/) {
        // This currently changes the active node to the given id and
        // this is overridden in the controller.
    };

    SimulationVisualizerWidget.prototype.onBackgroundDblClick = function () {
        this._el.append('<div>Background was double-clicked!!</div>');
    };

    /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
    SimulationVisualizerWidget.prototype.destroy = function () {
    };

    SimulationVisualizerWidget.prototype.onActivate = function () {
        this._logger.debug('SimulationVisualizerWidget has been activated');
    };

    SimulationVisualizerWidget.prototype.onDeactivate = function () {
        this._logger.debug('SimulationVisualizerWidget has been deactivated');
    };

    return SimulationVisualizerWidget;
});
